.PADTO 0x0040
VBlank:
	JP =VBlank_Routine

.PADTO 0x0100
Start:
	JP =Empty_VRAM

.PADTO 0x0104
Nintendo_Logo: ; The Nintendo logo must be stored in bytes 0x104-133
	.DB $CE,$ED,$66,$66,$CC,$0D,$00,$0B,$03,$73,$00,$83,$00,$0C,$00,$0D 
	.DB $00,$08,$11,$1F,$88,$89,$00,$0E,$DC,$CC,$6E,$E6,$DD,$DD,$D9,$99 
	.DB $BB,$BB,$67,$63,$6E,$0E,$EC,$CC,$DD,$DC,$99,$9F,$BB,$B9,$33,$3E 
	
.PADTO 0x0134
Checksum: ; The bytes 0x134-0x14d need to add up to 0xe7 (= 0xff - 0x19)
	.DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.DB $00,$00,$00,$00,$00,$00,$00,$00,$00,$e7

Empty_VRAM: ; (Clear screen)
	LD hl, $8000 ; We set the HL register to the start of VRAM
	
	Empty_VRAM.loop:
		XOR A
		LD (HL+), a 						; We set the memory pointed to by HL to 0 and increase HL
		LD a, $a0
		CP h        						; Until h has reached $a0 ($a0000 is the end of VRAM)
		JR NZ, =Empty_VRAM.loop
		
Play_Sound: ; Play a sound sweep period effect
	LD A, $77
	LD ($ff10), A ; 0x77 (0b01110111) sets the period sweep pace and slope to 7 and set the sweep to increase
	LD A, $f0
	LD ($ff12), A ; 0xf0 sets the volume to max and deactivate envelope sweep
	LD A, $00
	LD ($ff13), A
	LD A, $84
	LD ($ff14), A ; We set the period to start at 1024, deactivate sound length and start the sound
	
JP =Load_Number_Font
	
Number_Font_Data:
	.DB $00, $38, $4c, $c6, $c6, $64, $38, $00 ; 0
	.DB $00, $18, $38, $18, $18, $18, $7e, $00 ; 1
	.DB $00, $7c, $c6, $0e, $7c, $e0, $fe, $00 ; 2
	.DB $00, $7e, $0c, $38, $06, $c6, $7c, $00 ; 3
	.DB $00, $1c, $3c, $6c, $cc, $fe, $0c, $00 ; 4
	.DB $00, $fc, $80, $fc, $06, $c6, $7c, $00 ; 5
	.DB $00, $7c, $c0, $fc, $c6, $c6, $7c, $00 ; 6
	.DB $00, $fe, $c6, $0c, $18, $30, $30, $00 ; 7
	.DB $00, $7c, $c6, $7c, $c6, $c6, $7c, $00 ; 8
	.DB $00, $7c, $c6, $c6, $7e, $06, $7c, $00 ; 9
	
	
Load_Number_Font: ; Load number font into the tilemap at tiles 0x10-0x19
	LD HL, $8100
	LD DE, =Number_Font_Data
	LD B, $50
	
	Load_Number_Font.loop:
		LD A, (DE)
		LD (HL+), A
		LD (HL+), A
		INC DE
		DEC B
		JR NZ, =Load_Number_Font.loop
	
Activate_VBlank_Interrupt:
	LD A, $01
	LD ($ff), A
	EI
	
Number_print:
	LD HL, $9800
	LD A, ($ff82)
	CALL =Print_8bit
	LD A, ($ff81)
	CALL =Print_8bit
	LD A, ($ff80)
	CALL =Print_8bit
	HALT 					   ; We can now halt the program until VBlank
	JR =Number_print ; We loop to the start of the number printing routing
	
Print_8bit:
	LD C, A
	SWAP A 				   ; We start by the highest nibble
	AND $0f
	OR $10
	LD (HL+), A
	
	LD A, C
	AND $0f 			   ; Then the lowest
	OR $10
	LD (HL+), A

	RET

VBlank_Routine:
	PUSH AF
	PUSH HL
	LD HL, $ff80

	SCF
	CALL =Carry_HL_Number
	CALL =Carry_HL_Number
	CALL =Carry_HL_Number
	
	POP HL
	POP AF
	RETI

Carry_HL_Number:
	LD A, (HL)
	ADC $00
	DAA
	LD (HL+), A
	RET
